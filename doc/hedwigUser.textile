h1. Design

In Hedwig, clients publish messages associated with a topic, and they subscribe to a topic to receive all messages published with that topic. Clients are associated with (publish to and subscribe from) a Hedwig _instance_ (also referred to as a _region_), which consists of a number of servers called _hubs_. The hubs partition up topic ownership among themselves, and all publishes and subscribes to a topic must be done to its owning hub. When a client doesn't know the owning hub, it tries a default hub, which may redirect the client.

Running a Hedwig instance requires a Zookeeper server and at least three Bookkeeper servers.

An instance is designed to run within a datacenter. For wide-area messaging across datacenters, specify in the server configuration the set of default servers for each of the other instances. Dissemination among instances currently takes place over an all-to-all topology. Local subscriptions cause the hub to subscribe to all other regions on this topic, so that the local region receives all updates to it. Future work includes allowing the user to overlay alternative topologies.

Because all messages on a topic go through a single hub per region, all messages within a region are ordered. This means that, for a given topic, messages are delivered in the same order to all subscribers within a region, and messages from any particular region are delivered in the same order to all subscribers globally, but messages from different regions may be delivered in different orders to different regions. Providing global ordering is prohibitively expensive in the wide area. However, in Hedwig clients such as PNUTS, the lack of global ordering is not a problem, as PNUTS serializes all updates to a table row at a single designated master for that row.

Topics are independent; Hedwig provides no ordering across different topics.

Version vectors are associated with each topic and serve as the identifiers for each message. Vectors consist of one component per region. A component value is the region's local sequence number on the topic, and is incremented each time a hub persists a message (published either locally or remotely) to BK.

TODO: More on how version vectors are to be used, and on maintaining vector-maxes.

h1. Entry Points

The main class for running the server is @org.apache.hedwig.server.netty.PubSubServer@. It takes a single argument, which is a "Commons Configuration":http://commons.apache.org/configuration/ file. Currently, for configuration, the source is the documentation. See @org.apache.hedwig.server.conf.ServerConfiguration@ for server configuration parameters.

The client is a library intended to be consumed by user applications. It takes a Commons Configuration object, for which the source/documentation is in @org.apache.hedwig.client.conf.ClientConfiguration@.

We have provided a simple client application, @org.apache.hedwig.client.App@, that can drive a number of benchmarks. This also takes a single configuration file argument, which is fed to the client library.

We've provided a number of scripts to faciliate running servers and clients in a variety of configurations, including over distributed hosts. These are all consolidated in @scripts/hw.bash@. Although the snippets in this documentation run the script from the hedwig main directory, you can run it from any location. Apologies in advance for these being bash scripts; time permitting, a more robust and maintainable support/tooling infrastructure would be ideal.

h1. Deployment

When ssh-ing into a new host, you are requested to verify and accept the host key. In order to automatically accept the host keys for many new hosts (dangerous), use:

hosts=&quot;$host1 $host2 ...&quot; scripts/hw.bash warmup

The @hosts@ variable is set here to the list of hosts that you would like to warm up.

To set up JDK6 on some hosts, use:

hosts=&quot;...&quot; scripts/hw.bash setup-java $path&#95;to&#95;modified&#95;jdk6

The argument must point to a JDK6 binary self-extracting executable, but with the @more@ command that displays the License agreement replaced with @cat@. Unfortunately, this step must be performed manually. This script will extract the JDK directly into the home directory and update @$PATH@ in @~/.bashrc@ (in an idempotent fashion).

Because the current implementation uses a single socket per subscription, the Hedwig launching scripts all require a high @ulimit@ on the number of open file descriptors. Non-root users can only use up to the limit specified in @/etc/security/limits.conf@; to raise this to 1024^2, run:

hosts=&quot;...&quot; scripts/hw.bash setup-limits

This uses @ssh@ so that you need to enter your password for @sudo@ just once.

For most of the commands presented in the next section, you may prefix the command with:

push&#95;jar=true ...

to first push the assembly jar (assumed to be available in @server/target/@) to all hosts.

h1. Running Servers

To start three BK bookies on ports 3181-3183 on localhost (directories must all exist):

scripts/hw.bash bk 3181 $bk1&#95;journal&#95;dir $bk1&#95;ledger&#95;dir &amp; scripts/hw.bash bk 3182 $bk2&#95;journal&#95;dir $bk2&#95;ledger&#95;dir &amp; scripts/hw.bash bk 3183 $bk3&#95;journal&#95;dir $bk3&#95;ledger&#95;dir &amp;

To start a ZK on port 2181 (directory must exist):

scripts/hw.bash zk 2181 /path/for/zk/ &amp;

To register the BKs with the ZK (so that Hedwig knows where to find the bookies):

scripts/hw.bash setup-bk localhost:2181 @hostname@:3181 @hostname@:3182 @hostname@:3183

Everything up to this point may be done using a single command over a set of hosts, with ZK on port 9877 and BK on port 9878. The following function takes 2 arguments. The first is the ZK host. The second is a string list of BK hosts:

scripts/hw.bash start-zk-bks <span class="math">zkhost &quot;</math>bk1host $bk2host $bk3host ...&quot;

Note that the hosts may be SSH profile aliases in your @~/.ssh/config@; the script will parse this file and look up their hostnames where necessary. This applies for the hosts specified in the other commands.

Also, the scripts use the @bk-journal@ and @bk-ledger@ functions in @hw.bash@ to determine where to place the BK journal and ledger, given a hostname.

To start a Hedwig server locally:

scripts/hw.bash hw server.conf &amp;

To start Hedwig servers on some hosts &quot;$hw1host $hw2host $hw3host ...&quot; on port 9876, using $zkhost as the ZK server:

scripts/hw.bash start-hw '' &quot;$hw1host $hw2host $hw3host ...&quot; $zkhost

Above, the first empty string argument is the list of default servers to each of the other regions. You may run multiple connected instances of Hedwig this way.
E.g., to start three regions each with a single Hedwig hub that talk to each other, and using the hw.bash default server ports of 9875 (non-SSL) and 9876 (SSL):

scripts/hw.bash start-hw &quot;$hw2host:9875:9876 <span class="math">hw3host:9875:9876&quot; &quot;</math>hw1host&quot; <span class="math">zk1host scripts/hw.bash start-hw &quot;</math>hw1host:9875:9876 <span class="math">hw3host:9875:9876&quot; &quot;</math>hw2host&quot; <span class="math">zk2host scripts/hw.bash start-hw &quot;</math>hw1host:9875:9876 <span class="math">hw2host:9875:9876&quot; &quot;</math>hw3host&quot; $zk3host

Everything up to this point may be done using a single command over a set of hosts:

scripts/hw.bash start-region '' &quot;$hw1host $hw2host $hw3host ...&quot; <span class="math">zkhost &quot;</math>bk1host $bk2host $bk3host ...&quot;

The first three arguments are the same as for @start-hw@.

You may start multiple regions as well:

scripts/hw.bash start-regions regions.cfg

&quot;regions.cfg&quot; is a list of all regions, one per line, with each region having the following format:

region=<Region name>, hub=<list of hub servers>, default=<single hub server>, zk=<single ZK server>, bk=<list of BK servers>

This will create all of the regions with an all-to-all topology. Each region is connected to the default hub server of every other region. The &quot;, &quot; delimiter is used to separate out the different parts of a region along with the hard-coded parameter names. There also needs to be a newline after the last region line. Here is an example file specifying three regions:

region=wilbur, hub=wilbur90 wilbur91, default=wilbur90, zk=wilbur93, bk=wilbur93 wilbur94 wilbur95 region=re1, hub=sherpa7 sherpa8, default=sherpa7, zk=sherpa9, bk=sherpa9 sherpa10 sherpa11 region=peanuts, hub=peanuts1 peanuts2, default=peanuts2, zk=peanuts3, bk=peanuts3 peanuts4 peanuts5

h1. Running the Client

To run the test client:

JAVAFLAGS=&quot;...&quot; scripts/hw.bash hwc $conf&#95;path

where @$conf_path@ is a client configuration file.

To run the test client on some other hosts:

hosts=&quot;...&quot; JAVAFLAGS=&quot;...&quot; scripts/hw.bash app $hwhost

This will generate a simple configuration file assuming $hwhost is listening on the default SSL and non-SSL ports which are specified as global variables in hw.bash. Currently these are 9875 for non-SSL and 9876 for SSL.

Client usage is currently documented in the source. To run a subscription benchmark, set @JAVAFLAGS@ to:

-Dmode=sub -Dcount=10000 -Dnpar=100 -Dstart=5 -Dnwarmups=30

This will first create 30 warm-up subscriptions to topics &quot;warmup-5&quot; through &quot;warmup-34&quot;, then 10,000 benchmarked subscriptions to topics &quot;topic-5&quot; through &quot;topic-10,004&quot;. It will have a pipeline depth of 100 requests, meaning that there will be at most 100 outstanding (unresponded) messages in flight at any moment.

To run a publishing benchmark, set @JAVAFLAGS@ to:

-Dmode=pub -Dcount=10000 -Dnpar=100 -Dstart=5

This will publish 10,000 messages to topic &quot;topic-5&quot;, with a pipeline depth of 100 requests.

At the end, the programs will print throughput and latency information.

h1. Utilities

To kill all the user's Java processes running on some machines, use:

hosts=&quot;...&quot; scripts/hw.bash dkill

To check if any processes are running and are using ports of interest (esp. 9876-9878):

hosts=&quot;...&quot; scripts/hw.bash dstatus

Add an argument to @dstatus@ (may be anything) to get a more detailed listing.

To check if there's anything consuming the CPU on some machines:

hosts=&quot;...&quot; scripts/hw.bash tops

To run an arbitrary command on multiple hosts in parallel:

hosts=&quot;...&quot; scripts/hw.bash parssh $command

To do this in sequence:

hosts=&quot;...&quot; xargs= scripts/hw.bash parssh $command

